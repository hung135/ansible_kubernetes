---
- hosts: centos_kube_master
  user: root
  vars:
    join_token: "set me later"
  tasks:


    # # - name: Run command
    # #   command: setenforce 0
    # - name: Run command
    #   command: sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux
    # - name: Run command
    #   command: hostnamectl set-hostname 'k8s-master'
    # - name: Disable firewall 
    #   command: systemctl disable firewalld
    # - name: Disable firewall 
    #   command: systemctl stop firewalld
    # # - name: Run command
    # #   command: firewall-cmd --permanent --add-port=6443/tcp
    # # - name: Run command
    # #   command: firewall-cmd --permanent --add-port=2379-2380/tcp
    # # - name: Run command
    # #   command: firewall-cmd --permanent --add-port=10250/tcp
    # # - name: Run command
    # #   command: firewall-cmd --permanent --add-port=10251/tcp
    # # - name: Run command
    # #   command: firewall-cmd --permanent --add-port=10252/tcp
    # # - name: Run command
    # #   command: firewall-cmd --permanent --add-port=10255/tcp
    # # - name: Run command
    # #   command: firewall-cmd --reload
    # - name: Run command
    #   command: modprobe br_netfilter
    # - name: Run command
    #   command: echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables


    # - name: Copy file with owner and permissions
    #   copy:
    #     src: global_hosts_file
    #     dest: /etc/hosts
    #     owner: root
    #     group: root
    #     mode: '0644'
    # - name: Copy file with owner and permissions
    #   copy:
    #     src: Kubernetes.repo
    #     dest: /etc/yum.repos.d/Kubernetes.repo
    #     owner: root
    #     group: root
    #     mode: '0644'


    # - name: Run command
    #   command: systemctl stop docker 
    # - name: Run command
    #   command: systemctl enable docker

    # - name: Run Kubernetes Init
    #   command: kubeadm reset -f 
    # - name: Run command
    #   command: systemctl stop kubelet 
    # - name: Run command
    #   command: systemctl stop docker 
    # - name: Clean Up old Crap
    #   shell: |
    #     rm -rf /var/lib/cni/
    #     rm -rf /var/lib/kubelet/*
    #     rm -rf /etc/cni/
    #     ip link set dev cni0 down
    #     ip link set dev flannel.1 down
    #     ip link set dev docker0 down
    #     ip link set dev cni0 up
    #     ip link set dev flannel.1 up
    #     ip link set dev docker0 up

    # - name: Run command
    #   command: systemctl start docker 

    # - name: Run command Disable SWAP
    #   command: sudo sed -i '/ swap / s/^\/dev/#\/dev/' /etc/fstab
    # - name: Run Command Disble Swap for Current Session
    #   command: swapoff -a 
    # - name: Run Command Disble Swap for Current Session
    #   command: echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables 
    # - name: Run Kubernetes Init
    #   command: kubeadm init --pod-network-cidr=10.244.0.0/16
    #   #command: kubeadm init 

    # - name: Run command
    #   command: systemctl restart kubelet 
    # - name: Run command
    #   command: systemctl enable kubelet

    # - name: Run command Moving environment Variables to Root user
    #   command: cp /etc/kubernetes/admin.conf $HOME/
    # - name: Run command Chown root user
    #   #command: chown $(id -u):$(id -g) $HOME/admin.conf
    #   command: chown 0:0 $HOME/admin.conf
    #   #KUBECONFIG: $HOME/admin.conf
    # - name: Run command Moving environment Variables to Root user
    #   command:   kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml




    - name: Create Join Token
      command: kubeadm token create --print-join-command
      register: join_token
    - name: Echo out Variable
      command: echo {{ join_token }}

    # - name: Do Workinger Nodes
    #   include: pi_kubworkers.yaml 
    #   vars:
    #       join_token: "{{ join_token }}"
    - name: "Cluster token"
      shell: kubeadm token list | cut -d ' ' -f1 | sed -n '2p'
      register: K8S_TOKEN

    - name: "CA Hash"
      shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
      register: K8S_MASTER_CA_HASH

    - name: "Add K8S Token and Hash to dummy host"
      add_host:
        name:   "K8S_TOKEN_HOLDER"
        token:  "{{ K8S_TOKEN.stdout }}"
        hash:   "{{ K8S_MASTER_CA_HASH.stdout }}"
        masternode: "{{ansible_host}}"

    - name:
      debug:
        msg: "[Master] K8S_TOKEN_HOLDER K8S token is {{ hostvars['K8S_TOKEN_HOLDER']['token'] }}"

    - name:
      debug:
        msg: "[Master] K8S_TOKEN_HOLDER K8S Hash is  {{ hostvars['K8S_TOKEN_HOLDER']['hash'] }}"
